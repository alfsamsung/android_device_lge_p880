From 6e5064270085cbb5a2716234081424f55096b0ff Mon Sep 17 00:00:00 2001
From: alfsamsung <alfsamsung@hotmail.com>
Date: Sun, 28 Dec 2014 22:01:59 +0100
Subject: [PATCH] MR0_AUDIO_BLOB re-activated part II

On branch lollipop-eos
	modified:   services/audioflinger/AudioFlinger.cpp
no changes added to commit (use "git add" and/or "git commit -a")
---
 include/media/IAudioFlinger.h                      |  6 +++--
 media/libmedia/IAudioFlinger.cpp                   | 26 ++++++++++++++++++++++
 .../libmediaplayerservice/StagefrightRecorder.cpp  | 14 ++++++++++--
 services/audioflinger/AudioFlinger.cpp             | 21 ++++++++++++++++-
 services/audioflinger/AudioFlinger.h               |  5 ++++-
 .../audiopolicy/AudioPolicyClientImplLegacy.cpp    | 13 ++++++++++-
 services/audiopolicy/AudioPolicyService.cpp        |  9 ++++++++
 7 files changed, 87 insertions(+), 7 deletions(-)

diff --git a/include/media/IAudioFlinger.h b/include/media/IAudioFlinger.h
index 54be5f3..98e9fe8 100644
--- a/include/media/IAudioFlinger.h
+++ b/include/media/IAudioFlinger.h
@@ -187,9 +187,11 @@ public:
                                audio_source_t source,
                                audio_input_flags_t flags) = 0;
     virtual status_t closeInput(audio_io_handle_t input) = 0;
-
+#ifndef MR0_AUDIO_BLOB
     virtual status_t invalidateStream(audio_stream_type_t stream) = 0;
-
+#else
+    virtual status_t setStreamOutput(audio_stream_type_t stream, audio_io_handle_t output) = 0;
+#endif
     virtual status_t setVoiceVolume(float volume) = 0;
 
     virtual status_t getRenderPosition(uint32_t *halFrames, uint32_t *dspFrames,
diff --git a/media/libmedia/IAudioFlinger.cpp b/media/libmedia/IAudioFlinger.cpp
index 3528243..15c401e 100644
--- a/media/libmedia/IAudioFlinger.cpp
+++ b/media/libmedia/IAudioFlinger.cpp
@@ -59,7 +59,11 @@ enum {
     RESTORE_OUTPUT,
     OPEN_INPUT,
     CLOSE_INPUT,
+#ifndef MR0_AUDIO_BLOB
     INVALIDATE_STREAM,
+#else
+    SET_STREAM_OUTPUT,
+#endif
     SET_VOICE_VOLUME,
     GET_RENDER_POSITION,
     GET_INPUT_FRAMES_LOST,
@@ -601,6 +605,7 @@ public:
         return reply.readInt32();
     }
 
+#ifndef MR0_AUDIO_BLOB
     virtual status_t invalidateStream(audio_stream_type_t stream)
     {
         Parcel data, reply;
@@ -609,6 +614,17 @@ public:
         remote()->transact(INVALIDATE_STREAM, data, &reply);
         return reply.readInt32();
     }
+#else
+    virtual status_t setStreamOutput(audio_stream_type_t stream, audio_io_handle_t output)
+    {
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
+        data.writeInt32((int32_t) stream);
+        data.writeInt32((int32_t) output);
+        remote()->transact(SET_STREAM_OUTPUT, data, &reply);
+        return reply.readInt32();
+    }
+#endif
 
     virtual status_t setVoiceVolume(float volume)
     {
@@ -1222,12 +1238,22 @@ status_t BnAudioFlinger::onTransact(
             reply->writeInt32(closeInput((audio_io_handle_t) data.readInt32()));
             return NO_ERROR;
         } break;
+#ifndef MR0_AUDIO_BLOB
         case INVALIDATE_STREAM: {
             CHECK_INTERFACE(IAudioFlinger, data, reply);
             audio_stream_type_t stream = (audio_stream_type_t) data.readInt32();
             reply->writeInt32(invalidateStream(stream));
             return NO_ERROR;
         } break;
+#else
+        case SET_STREAM_OUTPUT: {
+            CHECK_INTERFACE(IAudioFlinger, data, reply);
+            uint32_t stream = data.readInt32();
+            audio_io_handle_t output = (audio_io_handle_t) data.readInt32();
+            reply->writeInt32(setStreamOutput((audio_stream_type_t) stream, output));
+            return NO_ERROR;
+        } break;
+#endif
         case SET_VOICE_VOLUME: {
             CHECK_INTERFACE(IAudioFlinger, data, reply);
             float volume = data.readFloat();
diff --git a/media/libmediaplayerservice/StagefrightRecorder.cpp b/media/libmediaplayerservice/StagefrightRecorder.cpp
index 3a8c163..fab3730 100644
--- a/media/libmediaplayerservice/StagefrightRecorder.cpp
+++ b/media/libmediaplayerservice/StagefrightRecorder.cpp
@@ -1570,6 +1570,16 @@ status_t StagefrightRecorder::setupCameraSource(
     Size videoSize;
     videoSize.width = mVideoWidth;
     videoSize.height = mVideoHeight;
+    
+    bool useMeta = encoderSupportsCameraSourceMetaDataMode;
+#ifdef QCOM_HARDWARE
+    char value[PROPERTY_VALUE_MAX];
+    if (property_get("debug.camcorder.disablemeta", value, NULL) &&
+        atoi(value)) {
+        useMeta = false;
+    }
+#endif
+
     if (mCaptureTimeLapse) {
         if (mTimeBetweenTimeLapseFrameCaptureUs < 0) {
             ALOGE("Invalid mTimeBetweenTimeLapseFrameCaptureUs value: %lld",
@@ -1581,13 +1591,13 @@ status_t StagefrightRecorder::setupCameraSource(
                 mCamera, mCameraProxy, mCameraId, mClientName, mClientUid,
                 videoSize, mFrameRate, mPreviewSurface,
                 mTimeBetweenTimeLapseFrameCaptureUs,
-                encoderSupportsCameraSourceMetaDataMode);
+                useMeta);
         *cameraSource = mCameraSourceTimeLapse;
     } else {
         *cameraSource = CameraSource::CreateFromCamera(
                 mCamera, mCameraProxy, mCameraId, mClientName, mClientUid,
                 videoSize, mFrameRate,
-                mPreviewSurface, encoderSupportsCameraSourceMetaDataMode);
+                mPreviewSurface, useMeta);
     }
     mCamera.clear();
     mCameraProxy.clear();
diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 1937633..9470737 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -159,8 +159,9 @@ static int load_audio_interface(const char *if_name, audio_hw_device_t **dev)
         rc = BAD_VALUE;
         goto out;
     }
-    return 0;
 #endif
+    return 0;
+
 out:
     *dev = NULL;
     return rc;
@@ -2420,6 +2421,7 @@ void AudioFlinger::closeInputInternal_l(sp<RecordThread> thread)
     closeInputFinish(thread);
 }
 
+#ifndef MR0_AUDIO_BLOB
 status_t AudioFlinger::invalidateStream(audio_stream_type_t stream)
 {
     Mutex::Autolock _l(mLock);
@@ -2432,7 +2434,24 @@ status_t AudioFlinger::invalidateStream(audio_stream_type_t stream)
 
     return NO_ERROR;
 }
+#else
+status_t AudioFlinger::setStreamOutput(audio_stream_type_t stream, audio_io_handle_t output)
+{
+    Mutex::Autolock _l(mLock);
+    ALOGV("setStreamOutput() stream %d to output %d", stream, output);
 
+    for (size_t i = 0; i < mPlaybackThreads.size(); i++) {
+        PlaybackThread *thread = mPlaybackThreads.valueAt(i).get();
+#ifdef QCOM_DIRECTTRACK
+        // Do not invalidate voip stream which uses directoutput thread
+        if(!(thread->type() == ThreadBase::DIRECT && (thread->mOutputFlags & AUDIO_OUTPUT_FLAG_VOIP_RX)))
+#endif
+            thread->invalidateTracks(stream);
+    }
+
+    return NO_ERROR;
+}
+#endif
 
 audio_unique_id_t AudioFlinger::newAudioUniqueId()
 {
diff --git a/services/audioflinger/AudioFlinger.h b/services/audioflinger/AudioFlinger.h
index 2765db7..d5d0c7a 100644
--- a/services/audioflinger/AudioFlinger.h
+++ b/services/audioflinger/AudioFlinger.h
@@ -205,8 +205,11 @@ public:
                                audio_input_flags_t flags);
 
     virtual status_t closeInput(audio_io_handle_t input);
-
+#ifndef MR0_AUDIO_BLOB
     virtual status_t invalidateStream(audio_stream_type_t stream);
+#else
+    virtual status_t setStreamOutput(audio_stream_type_t stream, audio_io_handle_t output);
+#endif
 
     virtual status_t setVoiceVolume(float volume);
 
diff --git a/services/audiopolicy/AudioPolicyClientImplLegacy.cpp b/services/audiopolicy/AudioPolicyClientImplLegacy.cpp
index 388ddaa..6508e45 100644
--- a/services/audiopolicy/AudioPolicyClientImplLegacy.cpp
+++ b/services/audiopolicy/AudioPolicyClientImplLegacy.cpp
@@ -239,7 +239,7 @@ int aps_close_input(void *service __unused, audio_io_handle_t input)
 
     return af->closeInput(input);
 }
-
+#ifndef MR0_AUDIO_BLOB
 int aps_invalidate_stream(void *service __unused, audio_stream_type_t stream)
 {
     sp<IAudioFlinger> af = AudioSystem::get_audio_flinger();
@@ -249,6 +249,17 @@ int aps_invalidate_stream(void *service __unused, audio_stream_type_t stream)
 
     return af->invalidateStream(stream);
 }
+#else
+int aps_set_stream_output(void *service, audio_stream_type_t stream,
+                                     audio_io_handle_t output)
+{
+    sp<IAudioFlinger> af = AudioSystem::get_audio_flinger();
+    if (af == 0)
+        return PERMISSION_DENIED;
+
+    return af->setStreamOutput(stream, output);
+}
+#endif
 
 int aps_move_effects(void *service __unused, int session,
                                 audio_io_handle_t src_output,
diff --git a/services/audiopolicy/AudioPolicyService.cpp b/services/audiopolicy/AudioPolicyService.cpp
index 46c5a96..32db394 100644
--- a/services/audiopolicy/AudioPolicyService.cpp
+++ b/services/audiopolicy/AudioPolicyService.cpp
@@ -1017,7 +1017,12 @@ audio_io_handle_t aps_open_input_on_module(void *service __unused,
                                                   audio_format_t *pFormat,
                                                   audio_channel_mask_t *pChannelMask);
 int aps_close_input(void *service __unused, audio_io_handle_t input);
+#ifndef MR0_AUDIO_BLOB
 int aps_invalidate_stream(void *service __unused, audio_stream_type_t stream);
+#else
+int aps_set_stream_output(void *service, audio_stream_type_t stream,
+                                     audio_io_handle_t output);
+#endif
 int aps_move_effects(void *service __unused, int session,
                                 audio_io_handle_t src_output,
                                 audio_io_handle_t dst_output);
@@ -1044,7 +1049,11 @@ namespace {
         .open_input            = aps_open_input,
         .close_input           = aps_close_input,
         .set_stream_volume     = aps_set_stream_volume,
+#ifndef MR0_AUDIO_BLOB
         .invalidate_stream     = aps_invalidate_stream,
+#else
+        .set_stream_output     = aps_set_stream_output,
+#endif
         .set_parameters        = aps_set_parameters,
         .get_parameters        = aps_get_parameters,
         .start_tone            = aps_start_tone,
-- 
1.9.1

